@using DAF.Web;
@{
    Layout = null;
}
<style type="text/css">
    .nav-pills > li > div {
        cursor: pointer;
    }
    .nav-pills > li > div.selected {
        background-color: #0094ff;
    }
</style>
<div id="controlTypes" class="hide">
    <h3>当前控件：<span data-bind="text:EditingWidgetName"></span></h3>
    <div id="ctTabs" class="tabs">
        <ul data-bind="foreach:WidgetModules">
            <li><a data-bind="attr: { href: '#' + Name() }, text: Name"></a></li>
        </ul>
        <!-- ko foreach:WidgetModules -->
        <div data-bind="foreach:Categories, attr: { id: Name }">
            <fieldset>
                <legend>
                    <span data-bind="text: Name"></span>
                </legend>
                <ul class="nav nav-pills" data-bind="foreach:Widgets">
                    <li>
                        <div class="well bg-none text-center" data-bind="click:vm.SetItemWidget, css: { selected: vm.IsEditingWidget($data) }">
                            <span data-bind="text:Name"></span>
                        </div>
                    </li>
                </ul>
            </fieldset>
        </div>
        <!-- /ko -->
    </div>
</div>
<div id="controlParas" data-bind="with:EditingWidget" class="hide">
    <!-- ko foreach:Parameters -->
    <table class="table table-bordered spanfull">
        <tr>
            <td class="caption span6">参数名称：</td>
            <td><span data-bind="text:Name"></span></td>
            <td class="caption span6">默认值：</td>
            <td><span data-bind="text:DefaultValue"></span></td>
        </tr>
        <tr>
            <td class="caption span6">参数说明：</td>
            <td colspan="3">
                <span data-bind="text:Description"></span>
            </td>
        </tr>
        <tr>
            <td class="caption span6">参数值：</td>
            <td colspan="3">
                <textarea rows="4" data-bind="value:ParaValue"></textarea>
            </td>
        </tr>
    </table>
    <!-- /ko -->
</div>

<script type="text/javascript">
    function InitWidgetTypes() {
        vm.EditingWidget = ko.observable(null);
        vm.WidgetModules = ko.observableArray([]);
        vm.EditingWidgetName = ko.computed(function () {
            var con = vm.EditingWidget();
            if (con) {
                return con.Module() + "/" + con.Category() + "/" + con.Name();
            }
            return "";
        });
        vm.IsEditingWidget = function (item) {
            var con = vm.EditingWidget();
            if (con) {
                return con.Path() == item.Path();
            }
            return false;
        };
        vm.FindWidget = function (path) {
            path = path.toLowerCase();
            for (var i = 0; i < vm.WidgetModules().length; i++) {
                var mod = vm.WidgetModules()[i];
                for (var j = 0; j < mod.Categories().length; j++) {
                    var cate = mod.Categories()[j];
                    for (var k = 0; k < cate.Widgets().length; k++) {
                        if (cate.Widgets()[k].Path().toLowerCase() == path) {
                            return cate.Widgets()[k];
                        }
                    }
                }
            }
            return null;
        };
        vm.SetItemWidget = function (con) {
            vm.EditingWidget(con);
        };
        vm.ShowItemWidget = function (item) {
            vm.EditingItem(item);
            vm.EditingWidget(vm.FindWidget(item.WidgetPath()));
            ShowDialog('#controlTypes', '选择控件', function () {
                var con = vm.EditingWidget();
                vm.EditingItem().WidgetPath(con.Path());
                vm.EditingWidget(null);
            }, function () {
                vm.EditingWidget(null);
            }, 600, 500);
        };
        vm.EditItemWidget = function (item) {
            var con = vm.FindWidget(item.WidgetPath());
            if (con) {
                if (con.Parameters().length > 0) {
                    var dic = Str2Dic(item.WidgetParas());
                    $.each(con.Parameters(), function (i, n) {
                        var vals = $.grep(dic, function (item, idx) { return item.Key == n.Name(); });
                        n.ParaValue(vals.length > 0 ? vals[0].Value : n.DefaultValue());
                    });
                }
                vm.EditingWidget(con);
                vm.EditingItem(item);
                ShowDialog('#controlParas', '编辑控件参数', function () {
                    var dic = [];
                    var con = vm.EditingWidget();
                    var paras = con.Parameters();
                    for (var i = 0; i < paras.length; i++) {
                        var val = paras[i].ParaValue();
                        if (!val || val.length <= 0) {
                            val = paras[i].DefaultValue();
                        }
                        dic.push({ Key: paras[i].Name(), Value: val });
                    }
                    vm.EditingItem().WidgetParas(Dic2Str(dic));
                }, null, 660, 500);
            }
        };
        vm.GetWidgetName = function (item) {
            if (!item) { item = this.EditingItem(); }
            if (item) {
                var con = this.FindWidget(item.WidgetPath());
                if (con) {
                    return con.Module() + "/" + con.Category() + "/" + con.Name();
                }
            }
            return "";
        };

        GetJson('@(UrlHelper.ClientUrl("Api/Page/WidgetTypes"))', function (data) {
            $.each(data, function (i, n) {
                if (!n.Module || n.Module.length <= 0)
                    n.Module = "public";
                if (!n.Category || n.Category.length <= 0)
                    n.Category = "others";
                $.each(n.Parameters, function (ii, nn) { nn.ParaValue = null; });
            });
            var mods = [];
            var mns = data.select(function (item) { return item.Module; }).unique();
            for (var i = 0; i < mns.length; i++) {
                var mod = { Name: mns[i], Categories: [] };
                var cns = $.grep(data, function (n, idx) { return n.Module == mns[i]; })
                    .select(function (item) { return item.Category; }).unique();

                for (var j = 0; j < cns.length; j++) {
                    var cate = { Name: cns[j], Widgets: [] };
                    var cs = $.grep(data, function (n, idx) { return n.Module == mns[i] && n.Category == cns[j]; });
                    cate.Widgets = cs;

                    mod.Categories.push(cate);
                }
                mods.push(mod);
            }
            ko.mapping.fromJS(mods, null, vm.WidgetModules);
            $('.tabs').tabs('destroy').tabs();
            SelectFirstSite();
        });
    };
</script>