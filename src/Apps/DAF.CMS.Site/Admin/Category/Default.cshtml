@using DAF.Core;
@using DAF.Web;
@using DAF.CMS;
@using DAF.CMS.Models;
@{
    var pageModel = this.PageModel<Category>();
}
<script type="text/html" id="item-template">
    <div class="tr" data-bind="attr:{id:Name, idx:ShowOrder}">
        <div class="td span6">
            <button type="button" class="btn btn-mini indent" data-bind="click:ToggleChildren" title="展开/收缩子项">
                <i class="icon-plus"></i>
            </button>
            <button type="button" class="btn btn-mini btn-none">
                <i class="icon-resize-vertical"></i>
            </button>
        </div>
        <div class="td span10">
            <div data-bind="visible:!vm.IsNew($data)"><span data-bind="text:Code"></span></div>
            <div data-bind="visible:vm.IsNew($data)">
                @pageModel.TextBoxFor(o => o.Code, new { data_bind = "value:Code, event: { blur: CheckExists }" })
            </div>
        </div>
        <div class="td span10">
            @pageModel.TextBoxFor(o => o.Name, new { data_bind = "value:Name" })
        </div>
        <div class="td span10">
            @pageModel.TextBoxFor(o => o.GroupName, new { data_bind = "value:GroupName" })
        </div>
        <div class="td text-center span4">
            <button class="btn btn-mini dropdown-toggle" type="button" data-toggle="#states" data-without-click="true" data-bind="click: ToggleStates, attr: { title: $root.GetState.bind($data, 'name') }, cls: $root.GetState.bind($data, 'btn')">
                <i data-bind="cls: $root.GetState.bind($data, 'icon')"></i>
                <span class="caret"></span>
            </button>
        </div>
        <div class="td">
            <button type="button" class="btn btn-primary btn-mini" data-bind="click:vm.AddChildItem" title="添加子项"><i class="icon-plus"></i></button>
            <button type="button" class="btn btn-danger btn-mini" data-bind="click:vm.DeleteItem" title="删除"><i class="icon-remove"></i></button>
        </div>
        <!-- ko if:$root.HasChildren($data) -->
        <div class="tbody indent" data-bind="template:{ name:'item-template', foreach:Children, afterRender: AfterRender }"></div>
        <!-- /ko -->
    </div>
</script>

<div class="clear">
    @RenderPage("~/Controls/_SelectSites.cshtml")
</div>
<div class="clear">
    <div class="data-container clear">
        <form method="post">
            <div class="table table-bordered">
                <div class="thead">
                    <div class="tr">
                        <div class="th span6"></div>
                        <div class="th span10">@(pageModel.CaptionFor(o => o.Code))</div>
                        <div class="th span10">@(pageModel.CaptionFor(o => o.Name))</div>
                        <div class="th span10">@(pageModel.CaptionFor(o => o.GroupName))</div>
                        <div class="th span4">@(pageModel.CaptionFor(o => o.Status))</div>
                        <div class="th"></div>
                    </div>
                </div>
                <div class="tbody" data-bind="template:{ name:'item-template', foreach:Data, afterRender: AfterRender }"></div>
            </div>
            <div class="form-actions">
                <button class="btn btn-primary" type="button" onclick="vm.AddItem();">
                    <i class="icon-plus"></i><span>新增</span></button>
                <button class="btn btn-success" type="button" onclick="vm.Save();">
                    <i class="icon-ok"></i><span>保存</span></button>
            </div>
        </form>
    </div>
</div>
<div id="states" class="dropdown-menu">
    <ul class="unstyled" data-bind="foreach: States">
        <li>
            <button class="btn btn-mini" type="button" data-bind="click: ChangeState, attr: { title: name }, cls: btn">
                <i data-bind="cls: icon"></i>
            </button>
        </li>
    </ul>
</div>

<script type="text/javascript">
    var vm;
    $(function () {
        vm = new KVM({
            getQueryUrl: function () { return '@(UrlHelper.ClientUrl("Api/Category/Data"))?siteId=' + vm.SelectedSite().SiteId; },
            onQuerySuccess: function (data) { InitEditors(); EnableItemSortable(); },
            getSaveUrl: function () { return '@(UrlHelper.ClientUrl("Api/Category/Save"))'; },
            createItem: function () {
                var id = IdGenerator.NewId();
                return {
                    CategoryId: ko.observable(id),
                    SiteId: ko.observable(vm.SelectedSite().SiteId),
                    Code: ko.observable(""),
                    Name: ko.observable(""),
                    GroupName: ko.observable(""),
                    ShowOrder: ko.observable(vm.Data().length),
                    Status: ko.observable(1),
                    ParentId: ko.observable(null),
                    FlatId: ko.observable(id),
                    Children: ko.observableArray([])
                };
            },
            onInit: function (self) {
                self.Categories = ko.observableArray([]);
                self.SelectedSite = ko.observable(null);
                self.SelectSite = function (site) {
                    vm.SelectedSite(site);
                    vm.GetData();
                };
                self.AddChildItem = function (item) {
                    var ci = vm.options.createItem();
                    ci.ShowOrder(item.Children().length);
                    ci.ParentId(item.CategoryId());
                    ci.FlatId(item.FlatId() + '.' + ci.CategoryId());
                    ci.DataState = DataState.New;

                    item.Children.push(ci);
                    self.NewItems.push(ci);

                    var tr = $('.tbody>.tr[id=' + item.Name() + ']');
                    $('.tbody', tr).show();
                    $('>.td:first>button:first>i', tr).prop('class', 'icon-minus');
                    $('.tbody>.tr:last input:first').focus()
                };
                self.DeleteItem = function (item) {
                    var tr = $(event.target).closest('.tr');
                    var tbody = tr.closest('.tbody');
                    var ptr = tbody.closest('.tr');
                    var items = ptr.length > 0 ? ko.dataFor(ptr.get(0)).Children : self.Data;
                    if (item.Children() && item.Children().length > 0) {
                        ShowConfirm("确认删除", "该记录包含子项，删除该记录会同时删除所有子项，确认要删除？",
                            function () {
                                if (item.Children().length > 0) {
                                    for (var i = 0; i < item.Children().length; i++) {
                                        vm.DeletedItems.unshift(item.Children()[i]);
                                    }
                                }
                                items.remove(item);
                                self.DeletedItems.push(item);
                                self._lastDeletedItem = item;
                            });
                    }
                    else {
                        items.remove(item);
                        self.DeletedItems.push(item);
                        self._lastDeletedItem = item;
                    }
                };
                self.HasChildren = function (item) {
                    return item.Children() && item.Children().length > 0;
                };
                self.States = GetDataStates();
                self.GetState = function (prop, item) {
                    var it = $.grep(vm.States, function (n, i) { return n.value == item.Status(); });
                    if (it && it.length > 0) {
                        return eval('it[0].' + prop);
                    }
                    return null;
                }
            },
            validate: function () {
                return $('.data-container>form').valid();
            }
        });
        ko.applyBindings(vm);
        $(document).off('selectsite').on('selectsite', OnSelectSite);
        SelectFirstSite();
    });

    function OnSelectSite(event, site) {
        vm.SelectSite(site);
    }

    function EnableItemSortable() {
        $('.tbody').sortable({
            axis: 'y',
            start: function (event, ui) {
                var tr = ui.item.closest('.tr');
                var tbody = tr.closest('.tbody');
                $('.tr:first>.td:first>button:first>i', tbody).prop('class', 'icon-plus');
                $('.tr>.tbody', tbody).hide();
            },
            beforeStop: function (event, ui) {
                var tr = ui.item.closest('.tr');
                var tbody = tr.closest('.tbody');
                var idx = 0;
                $('>.tr:not(.ui-sortable-placeholder)', tbody).each(function () {
                    var item = ko.dataFor(this);
                    if (item && item.ShowOrder) {
                        item.ShowOrder(idx);
                        idx++;
                    }
                });
            }
        });
    }

    function CheckExists(item, event) {
        var tr = $(event.target).closest('.tr');
        var tbody = tr.closest('.tbody');
        var ptr = tbody.closest('.tr');
        var items = ptr.length > 0 ? ko.dataFor(ptr.get(0)).Children : vm.Data;
        var it = $.grep(items(), function (n, i) { return n.Code() == item.Code(); });
        if (it.length > 1) {
            ShowMessage("提示信息", "已经存在编码为“" + item.Code() + "”的项目。", function () { $(event.target).val('').focus(); });
            return false;
        }
    }

    function ToggleChildren(item, event) {
        var tr = $(event.target).closest('.tr');
        if (vm.HasChildren(item)) {
            tr.find('.td:first>button:first>i').toggleClass('icon-plus').toggleClass('icon-minus');
            tr.find('>.tbody').toggle();
        }
        else {
            var url = '@(UrlHelper.ClientUrl("Api/Category/Data"))?siteId=' + vm.SelectedSite().SiteId + '&parentId=' + item.CategoryId();
            GetJson(url, function (data) {
                ko.mapping.fromJS(data, null, item.Children);
                for (var i = 0; i < item.Children().length; i++) {
                    var obj = item.Children()[i];
                    vm.trackChange(obj);
                }
                EnableItemSortable();
                tr.find('>.td:first>button:first>i').prop('class', 'icon-minus');
                tr.find('.tbody').show();
                ResizeIFrame();
            });
        }
    }

    function ToggleStates(item, event) {
        StopEvent(event);
        $(event.target).closest('button').dropdown('toggle');
        $('#states').data('item', item);
    }

    function ChangeState(state) {
        var item = $('#states').data('item');
        if (item) {
            item.Status(state.value);
        }
        $('#states').hide();
    }
</script>
