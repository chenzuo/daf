@using DAF.Core;
@using DAF.Web;
@using DAF.CMS.Models;
@{
    var pageModel = this.PageModel<PageTemplateControl>();
}

<div class="row">
    <div class="span12">
        @RenderPage("~/Controls/_SelectSites.cshtml")
    </div>
    <div class="span3">
        <div class="well">
            <h3>
                <span class="title">页面模板</span>
                <button class="btn btn-primary btn-mini" type="button" onclick="vm.NewTemplate();" title="新增页面模板"><i class="icon-plus"></i></button>
            </h3>
            <ul id="templates" class="nav nav-pills nav-stacked" data-bind="foreach:Templates">
                <li data-bind="attr:{id:TemplateName, title:TemplatePath}">
                    <a href="javascript:void(0);" data-bind="click:$root.SelectTemplate"><span data-bind="text:TemplateName"></span></a>
                    <button class="btn btn-primary btn-mini" type="button" data-bind="click:$root.EditTemplate" title="编辑页面模板"><i class="icon-pencil"></i></button>
                    <button class="btn btn-danger btn-mini" type="button" data-bind="click:$root.RemoveTemplate" title="删除页面模板"><i class="icon-remove"></i></button>
                </li>
            </ul>
        </div>
    </div>
    <div class="data-container span9 lgap1" data-bind="visible:SelectedTemplate">
        <h3 data-bind="with:SelectedTemplate">当前页面模板：<span data-bind="text:TemplateName"></span></h3>
        <form method="post">
            <div class="table table-bordered">
                <div class="thead">
                    <div class="tr">
                        <div class="th span1"></div>
                        <div class="th th-input">@(pageModel.CaptionFor(o => o.Section))</div>
                        <div class="th th-input span3">@(pageModel.CaptionFor(o => o.ControlPath))</div>
                        <div class="th th-input span3">@(pageModel.CaptionFor(o => o.ControlParas))</div>
                        <div class="th th-input">@(pageModel.CaptionFor(o => o.Container))</div>
                        <div class="th"></div>
                    </div>
                </div>
                <div class="tbody" data-bind="foreach:Data">
                    <div class="tr" data-bind="attr:{id:TemplateControlId, idx:ShowOrder}">
                        <div class="td span1">
                            <button type="button" class="btn btn-mini btn-none">
                                <i class="icon-resize-vertical"></i>
                            </button>
                        </div>
                        <div class="td td-input">
                            <select data-bind="options: $root.Sections, optionsText: 'Name', optionsValue: 'Name', value: Section"></select>
                        </div>
                        <div class="td td-input span3">
                            <select data-bind="options: $root.ControlTypes, optionsText: 'Name', optionsValue: 'Path', value: ControlPath"></select>
                        </div>
                        <div class="td td-input span3">
                            @pageModel.TextBoxFor(o => o.ControlParas, new { data_bind = "value:ControlParas" })
                        </div>
                        <div class="td td-input">
                            @pageModel.TextBoxFor(o => o.Container, new { data_bind = "value:Container" })
                        </div>
                        <div class="td">
                            <button type="button" class="btn btn-danger btn-mini" data-bind="click:vm.DeleteItem" title="删除"><i class="icon-remove"></i></button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-actions">
                <button class="btn btn-primary" type="button" onclick="vm.AddItem();">
                    <i class="icon-plus"></i><span>新增</span></button>
                <button class="btn btn-success" type="button" onclick="vm.Save();">
                    <i class="icon-ok"></i><span>保存</span></button>
            </div>
        </form>
    </div>
    <div id="editTemplate" data-bind="with:EditingTemplate" class="hide">
        <table class="table table-bordered">
            <tr>
                <td class="caption">名称：</td>
                <td><span data-bind="text:TemplateName, visible:!$root.IsNew($data)"></span>
                    <input id="TemplateName" type="text" class="input-medium" required="true" data-bind="value:TemplateName, visible:$root.IsNew($data)" /></td>
            </tr>
            <tr>
                <td class="caption">路径：</td>
                <td>
                    <select data-bind="options: vm.TemplateTypes, optionsText: 'Name', optionsValue: 'Path', value: TemplatePath"></select>
                </td>
            </tr>
        </table>
    </div>
</div>

<script type="text/javascript">
    var vm;
    $(function () {
        vm = new KVM({
            getQueryUrl: function () { return '@(UrlHelper.ClientUrl("Api/PageTemplate/Data"))?siteId=' + vm.SelectedSite() + '&template=' + vm.SelectedTemplate().TemplateName(); },
            onQuerySuccess: function (data) { EnableItemSortable(); },
            getSaveUrl: function () { return '@(UrlHelper.ClientUrl("Api/PageTemplate/Save"))'; },
            createItem: function () {
                return {
                    TemplateControlId: ko.observable(IdGenerator.NewId()),
                    SiteId: ko.observable(vm.SelectedSite()),
                    TemplateName: ko.observable(vm.SelectedTemplate().TemplateName()),
                    Section: ko.observable(""),
                    ControlPath: ko.observable(""),
                    ControlParas: ko.observable(""),
                    Container: ko.observable(""),
                    Cached: ko.observable(false),
                    CacheMunites: ko.observable(0),
                    ShowOrder: ko.observable(vm.Data().length)
                };
            },
            onInit: function (self) {
                self.TemplateTypes = ko.observableArray([]);
                self.ControlTypes = ko.observableArray([]);
                self.Templates = ko.observableArray([]);
                self.SelectedSite = ko.observable(null);
                self.SelectedTemplate = ko.observable(null);
                self.EditingTemplate = ko.observable(null);
                self.Sections = ko.computed(function () {
                    var st = self.SelectedTemplate();
                    if (st) {
                        var path = st.TemplatePath();
                        var ts = $.grep(self.TemplateTypes(), function (n, i) { return n.Path().toLowerCase() == path.toLowerCase(); });
                        if (ts && ts.length > 0) {
                            return ts[0].Sections();
                        }
                    }
                    return null;
                });
                self.SelectSite = function (siteId) {
                    vm.SelectedSite(siteId);
                    GetJson('@(UrlHelper.ClientUrl("Api/PageTemplate/Templates"))?siteId=' + vm.SelectedSite(), function (data) {
                        ko.mapping.fromJS(data, null, vm.Templates);
                        if (vm.Templates().length > 0) {
                            vm.SelectTemplate(vm.Templates()[0]);
                        }
                        else {
                            vm.SelectTemplate(null);
                        }
                    });
                };
                self.NewTemplate = function () {
                    var template = {
                        SiteId: ko.observable(vm.SelectedSite()),
                        TemplateName: ko.observable(""),
                        TemplatePath: ko.observable(""),
                        AllowContentTypes: ko.observable(null)
                    };
                    template.DataState = DataState.New;
                    self.EditingTemplate(template);
                    SaveTemplate(true);
                };
                self.EditTemplate = function (item) {
                    self.EditingTemplate(item);
                    SaveTemplate(false);
                };
                self.RemoveTemplate = function (item) {
                    if (self.Data() && self.Data().length > 0) {
                        ShowMessage('提示信息', '该页面模板' + item.TemplateName() + '下包含控件，不允许删除！');
                        return false;
                    }
                    ShowConfirm("提示信息", "确认删除页面模板" + item.TemplateName() + "？",
                    function () {
                        GetJson('@(UrlHelper.ClientUrl("Api/PageTemplate/DeleteTemplate"))?siteId=' + vm.SelectedSite() + '&template=' + item.TemplateName(),
                            function (data) {
                                self.Templates.remove(item);
                                if (self.Templates().length > 0) {
                                    self.SelectTemplate(self.Templates()[0]);
                                }
                                ShowMessage(data.Title, data.Message);
                            });
                    });
                };
                self.SelectTemplate = function (template) {
                    self.SelectedTemplate(template);
                    if (template) {
                        self.GetData();
                    }
                };
            },
            validate: function () {
                return $('.data-container>form').valid();
            }
        });
        ko.applyBindings(vm);
        $(document).off('selectsite').on('selectsite', OnSelectSite);
        GetJson('@(UrlHelper.ClientUrl("Api/PageTemplate/TemplateTypes"))', function (data) {
            ko.mapping.fromJS(data, null, vm.TemplateTypes);
            GetJson('@(UrlHelper.ClientUrl("Api/PageTemplate/ControlTypes"))', function (data) {
                ko.mapping.fromJS(data, null, vm.ControlTypes);
                SelectFirstSite();
            });
        });
    });

        function OnSelectSite(event, siteId) {
            vm.SelectSite(siteId);
        }

        function SaveTemplate(isNew) {
            ShowDialog('#editTemplate', isNew ? '新增页面模板' : '编辑页面模板',
                function () {
                    var exists = $('#templates li[id=' + vm.EditingTemplate().TemplateName() + ']').length;
                    if (isNew && exists > 0 || exists > 1) {
                        ShowMessage("提示信息", "已经存在页面模板" + groupName);
                        return true;
                    }

                    var url = isNew ? '@(UrlHelper.ClientUrl("Api/PageTemplate/AddTemplate"))' : '@(UrlHelper.ClientUrl("Api/PageTemplate/EditTemplate"))';
                PostJson(url, ko.mapping.toJS(vm.EditingTemplate),
                    function (data) {
                        if (isNew) {
                            vm.EditingTemplate().DataState = DataState.None;
                            vm.Templates.push(vm.EditingTemplate());
                            vm.SelectTemplate(vm.EditingTemplate());
                        }
                        vm.EditingTemplate(null);
                        ShowMessage(data.Title, data.Message);
                    });
            });
        }

        function EnableItemSortable() {
            $('.tbody').sortable({
                axis: 'y',
                start: function (event, ui) {
                    var tr = ui.item.closest('.tr');
                    var tbody = tr.closest('.tbody');
                    $('.tr:first>.td:first>button:first>i', tbody).prop('class', 'icon-plus');
                    $('.tr>.tbody', tbody).hide();
                },
                beforeStop: function (event, ui) {
                    var tr = ui.item.closest('.tr');
                    var tbody = tr.closest('.tbody');
                    var idx = 0;
                    $('>.tr:not(.ui-sortable-placeholder)', tbody).each(function () {
                        var item = ko.dataFor(this);
                        if (item && item.ShowOrder) {
                            item.ShowOrder(idx);
                            idx++;
                        }
                    });
                }
            });
        }
</script>
